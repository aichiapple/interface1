{"name": "test_login[args0]", "status": "broken", "statusDetails": {"message": "openpyxl.utils.exceptions.InvalidFileException: openpyxl does not support  file format, please check you can open it with Excel first. Supported formats are: .xlsx,.xlsm,.xltx,.xltm", "trace": "args = {'actual': None, 'body': \"{'username':'qiaort','password':'po4xcjK0hX8rifDZqEWecg==','captcha':'','checkType':'pwd','language':'zh_CN_'}\", 'casename': '测试登录', 'expect': \"{'code':200}\", ...}\n\n    @pytest.mark.parametrize('args',read_yaml('%s/data/data_yaml/1.登录.yaml' % base_dir)['cases'])\n    def test_login(args):\n        print(str(args))\n        \"\"\"登录接口，获取token\"\"\"\n        url=args['url']\n        headers=eval(args['head'])\n        payloads=json.dumps(eval(args['body']))\n        params=eval(args['body'])\n        method=args['method']\n        run_result_txt='%s/data/run_result.txt' % base_dir\n        expect=args['expect']\n>       res=request_utl(method=method,url=url,headers=headers,payloads=payloads,params=params,expect=expect,run_result_txt=run_result_txt,\n                        resultWriteExcel='%s/data/case_excel/MCC自动化测试表格',resultWriteSheet='1.登录')\n\ntestcase\\test_login.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\request_util.py:31: in request_utl\n    ExcelUtil(excel_path=resultWriteExcel).write_excel(resultWriteSheet=resultWriteSheet)\ncommon\\excel_util.py:10: in __init__\n    self.wb=load_workbook(excel_path)\nD:\\Develop\\pycharm\\PyCharm Community Edition 2020.2.1\\jbr\\bin\\interface\\lib\\site-packages\\openpyxl\\reader\\excel.py:346: in load_workbook\n    reader = ExcelReader(filename, read_only, keep_vba,\nD:\\Develop\\pycharm\\PyCharm Community Edition 2020.2.1\\jbr\\bin\\interface\\lib\\site-packages\\openpyxl\\reader\\excel.py:123: in __init__\n    self.archive = _validate_archive(fn)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nfilename = '%s/data/case_excel/MCC自动化测试表格'\n\n    def _validate_archive(filename):\n        \"\"\"\n        Does a first check whether filename is a string or a file-like\n        object. If it is a string representing a filename, a check is done\n        for supported formats by checking the given file-extension. If the\n        file-extension is not in SUPPORTED_FORMATS an InvalidFileException\n        will raised. Otherwise the filename (resp. file-like object) will\n        forwarded to zipfile.ZipFile returning a ZipFile-Instance.\n        \"\"\"\n        is_file_like = hasattr(filename, 'read')\n        if not is_file_like:\n            file_format = os.path.splitext(filename)[-1].lower()\n            if file_format not in SUPPORTED_FORMATS:\n                if file_format == '.xls':\n                    msg = ('openpyxl does not support the old .xls file format, '\n                           'please use xlrd to read this file, or convert it to '\n                           'the more recent .xlsx file format.')\n                elif file_format == '.xlsb':\n                    msg = ('openpyxl does not support binary format .xlsb, '\n                           'please convert this file to .xlsx format if you want '\n                           'to open it with openpyxl')\n                else:\n                    msg = ('openpyxl does not support %s file format, '\n                           'please check you can open '\n                           'it with Excel first. '\n                           'Supported formats are: %s') % (file_format,\n                                                           ','.join(SUPPORTED_FORMATS))\n>               raise InvalidFileException(msg)\nE               openpyxl.utils.exceptions.InvalidFileException: openpyxl does not support  file format, please check you can open it with Excel first. Supported formats are: .xlsx,.xlsm,.xltx,.xltm\n\nD:\\Develop\\pycharm\\PyCharm Community Edition 2020.2.1\\jbr\\bin\\interface\\lib\\site-packages\\openpyxl\\reader\\excel.py:93: InvalidFileException"}, "parameters": [{"name": "args", "value": "{'id': 1, 'body': \"{'username':'qiaort','password':'po4xcjK0hX8rifDZqEWecg==','captcha':'','checkType':'pwd','language':'zh_CN_'}\", 'casename': '测试登录', 'head': \"{'Content-Type':'application/x-www-form-urlencoded;charset=UTF-8','Accept':'application/json, text/plain, */*'}\", 'method': 'post', 'url': 'https://cocreatinguat.midea.com/api/authorization/login', 'expect': \"{'code':200}\", 'actual': None, 'valiadate': '{\"code\":200}'}"}], "start": 1721834753044, "stop": 1721834753432, "uuid": "435a407f-e6aa-4659-b099-83a1583a9fb4", "historyId": "031f3fa3f3aa6a3a2cf34bb24b7b45dc", "testCaseId": "5c2b9153db6534bb5ca7321039f75f69", "fullName": "testcase.test_login#test_login", "labels": [{"name": "parentSuite", "value": "testcase"}, {"name": "suite", "value": "test_login"}, {"name": "host", "value": "LAPTOP-G7ADVSFE"}, {"name": "thread", "value": "9764-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.test_login"}]}