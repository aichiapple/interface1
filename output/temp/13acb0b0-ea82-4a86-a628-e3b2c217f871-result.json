{"name": "test_login[args0]", "status": "broken", "statusDetails": {"message": "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)", "trace": "self = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\nD:\\Develop\\pycharm\\PyCharm Community Edition 2020.2.1\\jbr\\bin\\interface\\lib\\site-packages\\requests\\models.py:974: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nD:\\Develop\\python\\lib\\json\\__init__.py:357: in loads\n    return _default_decoder.decode(s)\nD:\\Develop\\python\\lib\\json\\decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x000001A7D296F4F0>, s = '', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nD:\\Develop\\python\\lib\\json\\decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nargs = {'actual': None, 'body': \"{'username':'qiaort','password':'po4xcjK0hX8rifDZqEWecg==','captcha':'','checkType':'pwd','language':'zh_CN_'}\", 'casename': '测试登录', 'expect': \"'msg':'登录成功'\", ...}\n\n    @pytest.mark.parametrize('args',read_yaml('%s/data/data_yaml/1.登录.yaml' % base_dir)['cases'])\n    def test_login(args):\n        print(str(args))\n        \"\"\"登录接口，获取token\"\"\"\n        url=args['url']\n        headers=eval(args['head'])\n        payloads=json.dumps(eval(args['body']))\n        params=eval(args['body'])\n        method=args['method']\n        run_result_txt='%s/data/run_result.txt' % base_dir\n        expect=args['expect']\n>       res=request_utl(method=method,url=url,headers=headers,payloads=payloads,params=params,expect=expect,run_result_txt=run_result_txt)\n\ntestcase\\test_login.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\request_util.py:18: in request_utl\n    print(res.json())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nD:\\Develop\\pycharm\\PyCharm Community Edition 2020.2.1\\jbr\\bin\\interface\\lib\\site-packages\\requests\\models.py:978: JSONDecodeError"}, "parameters": [{"name": "args", "value": "{'id': 1, 'body': \"{'username':'qiaort','password':'po4xcjK0hX8rifDZqEWecg==','captcha':'','checkType':'pwd','language':'zh_CN_'}\", 'casename': '测试登录', 'head': \"{'Content-Type':'text/html','charset':'UTF-8'}\", 'method': 'post', 'url': 'https://cocreatinguat.midea.com/api/authorization/login', 'expect': \"'msg':'登录成功'\", 'actual': None, 'valiadate': None}"}], "start": 1721742861167, "stop": 1721742862082, "uuid": "1acc42cd-d8a6-4656-b56f-2c0757917d00", "historyId": "8781472611b2b1554f392c6037e77cd5", "testCaseId": "5c2b9153db6534bb5ca7321039f75f69", "fullName": "testcase.test_login#test_login", "labels": [{"name": "parentSuite", "value": "testcase"}, {"name": "suite", "value": "test_login"}, {"name": "host", "value": "LAPTOP-G7ADVSFE"}, {"name": "thread", "value": "16840-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.test_login"}]}